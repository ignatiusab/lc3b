import lc3b_types::*;

module mmio
(
	input logic				dmem_read, 
	input logic				dmem_write,
	input lc3b_word			dmem_address,
	input lc3b_word			dmem_wdata,
	
	output logic			dmem_resp,
	output lc3b_word		dmem_rdata,
	
	input logic				l1_mem_resp,
	input lc3b_word			l1_mem_rdata,
	
	output logic			l1_mem_read, 
	output logic			l1_mem_write,
	output lc3b_word		l1_mem_address,
	output lc3b_word		l1_mem_wdata,
	
	input lc3b_word			counter_rdata,
	output logic 			clear
);

logic counter_sel;

assign l1_mem_wdata = dmem_wdata;
assign l1_mem_address = dmem_address;

always_comb
begin
	counter_sel = 1'b0;
	clear = 1'b0;
	
	if (dmem_address[15:8] == 12'hff)
	begin
		counter_sel = 1'b1;
		clear = dmem_write;
	end
end

mux2 #(.width(1)) read_mux
(
	.sel(counter_sel),
	.a(dmem_read),
	.b(1'b0),
	.f(l1_mem_read)
);

mux2 #(.width(1)) write_mux
(
	.sel(counter_sel),
	.a(dmem_write),
	.b(1'b0),
	.f(l1_mem_write)
);

mux2 #(.width(1)) resp_mux
(
	.sel(counter_sel),
	.a(l1_mem_resp),
	.b(1'b1),
	.f(dmem_resp)
);

mux2 #(.width($bits(lc3b_word))) rdata_mux
(
	.sel(counter_sel),
	.a(l1_mem_rdata),
	.b(counter_rdata),
	.f(dmem_rdata)
);

endmodule : mmio