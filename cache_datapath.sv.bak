import lc3b_types::*;

module cache_datapath
(
	input clk,
	
	// input signals from cache_control
	input data_in_mux_sel,
	input [1:0] pmem_address_mux_sel,
	
	// write signals
	input lru_w,
	input dirty0_w, valid0_w, tag0_w, data0_w,
	input dirty1_w, valid1_w, tag1_w, data1_w,
	
	// address signals
	input lc3b_c_index index,
	input lc3b_c_tag tag,
	input lc3b_c_offset3 offset3,
	
	// memory input signals
	input lc3b_word mem_address,
	input mem_write,
	input lc3b_mem_wmask mem_byte_enable,
	input lc3b_word mem_wdata,
	
	// memory output signals
	output lc3b_word mem_rdata,
	
	// physical memory input signals
	input lc3b_c_line pmem_rdata,
	
	// physical memory output signals
	output lc3b_word pmem_address,
	output lc3b_c_line pmem_wdata,
	
	// output signals to cache_control
	output logic dirty0, dirty1,
	output logic hit0, hit1,
	output logic lru
);

lc3b_c_tag tag0_out, tag1_out;
logic valid0_out, valid1_out;
lc3b_c_line data_in, data0_out, data1_out, new_line;
lc3b_c_line data_way_mux_out;

///////////////////////// Hit Detection /////////////////////////

detect_hit detect_hit ( .tag(tag), .tag0(tag0_out), .tag1(tag1_out), .valid0(valid0_out), .valid1(valid1_out), .hit0(hit0), .hit1(hit1) );

/////////////////////////// LRU /////////////////////////////////

array #(.width(1)) lru_array ( .clk(clk), .write(lru_w), .index(index), .datain(hit0), .dataout(lru) );

/////////////////////////// Way 0 ///////////////////////////////

array #(.width(1)) dirty_array_0 ( .clk(clk), .write(dirty0_w), .index(index), .datain(mem_write), .dataout(dirty0) );

array #(.width(1)) valid_array_0 ( .clk(clk), .write(valid0_w), .index(index), .datain(1'b1), .dataout(valid0_out) );

array #(.width(9)) tag_array_0 ( .clk(clk), .write(tag0_w), .index(index), .datain(tag), .dataout(tag0_out) );

array #(.width(128)) data_array_0 ( .clk(clk), .write(data0_w), .index(index), .datain(data_in), .dataout(data0_out) );

/////////////////////////// Way 1 ///////////////////////////////

array #(.width(1)) dirty_array_1 ( .clk(clk), .write(dirty1_w), .index(index), .datain(mem_write), .dataout(dirty1) );

array #(.width(1)) valid_array_1 ( .clk(clk), .write(valid1_w), .index(index), .datain(1'b1), .dataout(valid1_out) );

array #(.width(9)) tag_array_1 ( .clk(clk), .write(tag1_w), .index(index), .datain(tag), .dataout(tag1_out) );

array #(.width(128)) data_array_1 ( .clk(clk), .write(data1_w), .index(index), .datain(data_in), .dataout(data1_out) );

//////////////////////////// Output /////////////////////////////

mux2 #(.width(128)) data_way_mux ( .sel(hit1), .a(data0_out), .b(data1_out), .f(data_way_mux_out) );

mux8 #(.width(128)) data_word_mux ( .sel(offset3), .a(data_way_mux_out[15:0]), .b(data_way_mux_out[31:16]), .c(data_way_mux_out[47:32]), 
									.d(data_way_mux_out[63:48]), .e(data_way_mux_out[79:64]), .f(data_way_mux_out[95:80]), 
									.g(data_way_mux_out[111:96]), .h(data_way_mux_out[127:112]), .out(mem_rdata) );
									
mux2 #(.width(128)) write_back_mux ( .sel(lru), .a(data0_out), .b(data1_out), .f(pmem_wdata) );

mux4 #(.width(128)) pmem_address_mux ( .sel(pmem_address_mux_sel), .a(mem_address), .b({tag0_out, index, 4'h0}), .c({tag1_out, index, 4'h0}), .d(), .f(pmem_address) );

/////////////////////////// Input //////////////////////////////

mux2 #(.width(128)) data_in_mux ( .sel(data_in_mux_sel), .a(pmem_rdata), .b(new_line), .f(data_in) );

line_builder line_builder ( .mem_wdata(mem_wdata), .mem_byte_enable(mem_byte_enable), .offset(offset3), .data_in(data_way_mux_out), .new_line(new_line) );

endmodule : cache_datapath